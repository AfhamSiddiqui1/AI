/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for all data.
 *
 * Data Structure:
 * - All data is nested under /users/{userId}, creating a clear ownership hierarchy.
 * - PitchIdeas, GeneratedPitches, and DesignSuggestions are all subcollections
 *   of a specific user's data tree.
 *
 * Key Security Decisions:
 * - Users can only access their own data, preventing cross-user data access.
 * - Listing operations are restricted to the owner of the user's data tree.
 * - Data consistency between paths and document fields is enforced on create and update.
 *
 * Denormalization for Authorization:
 * - The data structure inherently denormalizes the user ID into each subcollection
 *   path, enabling path-based ownership checks (e.g., isOwner(userId)). This
 *   avoids the need for costly `get()` calls to verify ownership.
 *
 * Structural Segregation:
 * - All private data is stored under the /users/{userId} collection, ensuring
 *   clear segregation between public and private data. This eliminates the need
 *   for boolean flags to distinguish between public and private states.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Unauthenticated user attempts to create a user profile.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);

      /**
       * @description Protects the /users/{userId}/pitchIdeas/{pitchIdeaId} collection.
       * @path /users/{userId}/pitchIdeas/{pitchIdeaId}
       * @allow (create) - Authenticated user creates a pitch idea under their profile.
       * @allow (get, list, update, delete) - Authenticated user accesses their own pitch idea.
       * @deny (create) - Unauthenticated user attempts to create a pitch idea.
       * @deny (get, list, update, delete) - Authenticated user attempts to access another user's pitch idea.
       * @principle Enforces document ownership for all operations.
       */
      match /pitchIdeas/{pitchIdeaId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
        allow delete: if isExistingOwner(userId);

        /**
         * @description Protects the /users/{userId}/pitchIdeas/{pitchIdeaId}/generatedPitch subcollection.
         * @path /users/{userId}/pitchIdeas/{pitchIdeaId}/generatedPitch
         * @allow (create) - Authenticated user creates a generated pitch under their pitch idea.
         * @allow (get, list, update, delete) - Authenticated user accesses their own generated pitch.
         * @deny (create) - Unauthenticated user attempts to create a generated pitch.
         * @deny (get, list, update, delete) - Authenticated user attempts to access another user's generated pitch.
         * @principle Enforces document ownership for all operations.
         */
        match /generatedPitch {
          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
        }

        /**
         * @description Protects the /users/{userId}/pitchIdeas/{pitchIdeaId}/designSuggestion subcollection.
         * @path /users/{userId}/pitchIdeas/{pitchIdeaId}/designSuggestion
         * @allow (create) - Authenticated user creates a design suggestion under their pitch idea.
         * @allow (get, list, update, delete) - Authenticated user accesses their own design suggestion.
         * @deny (create) - Unauthenticated user attempts to create a design suggestion.
         * @deny (get, list, update, delete) - Authenticated user attempts to access another user's design suggestion.
         * @principle Enforces document ownership for all operations.
         */
        match /designSuggestion {
          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
        }
      }
    }
  }
}